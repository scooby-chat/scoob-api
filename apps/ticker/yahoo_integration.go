package ticker

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"net/url"
)

type AutoGenerated struct {
	QuoteSummary struct {
		Result []struct {
			Price struct {
				MaxAge          int `json:"maxAge"`
				PreMarketChange struct {
				} `json:"preMarketChange"`
				PreMarketPrice struct {
				} `json:"preMarketPrice"`
				PostMarketChange struct {
				} `json:"postMarketChange"`
				PostMarketPrice struct {
				} `json:"postMarketPrice"`
				RegularMarketChangePercent struct {
					Raw float64 `json:"raw"`
					Fmt string  `json:"fmt"`
				} `json:"regularMarketChangePercent"`
				RegularMarketChange struct {
					Raw float64 `json:"raw"`
					Fmt string  `json:"fmt"`
				} `json:"regularMarketChange"`
				RegularMarketTime int `json:"regularMarketTime"`
				PriceHint         struct {
					Raw     int    `json:"raw"`
					Fmt     string `json:"fmt"`
					LongFmt string `json:"longFmt"`
				} `json:"priceHint"`
				RegularMarketPrice struct {
					Raw float64 `json:"raw"`
					Fmt string  `json:"fmt"`
				} `json:"regularMarketPrice"`
				RegularMarketDayHigh struct {
					Raw float64 `json:"raw"`
					Fmt string  `json:"fmt"`
				} `json:"regularMarketDayHigh"`
				RegularMarketDayLow struct {
					Raw float64 `json:"raw"`
					Fmt string  `json:"fmt"`
				} `json:"regularMarketDayLow"`
				RegularMarketVolume struct {
					Raw     int    `json:"raw"`
					Fmt     string `json:"fmt"`
					LongFmt string `json:"longFmt"`
				} `json:"regularMarketVolume"`
				AverageDailyVolume10Day struct {
				} `json:"averageDailyVolume10Day"`
				AverageDailyVolume3Month struct {
				} `json:"averageDailyVolume3Month"`
				RegularMarketPreviousClose struct {
					Raw float64 `json:"raw"`
					Fmt string  `json:"fmt"`
				} `json:"regularMarketPreviousClose"`
				RegularMarketSource string `json:"regularMarketSource"`
				RegularMarketOpen   struct {
					Raw float64 `json:"raw"`
					Fmt string  `json:"fmt"`
				} `json:"regularMarketOpen"`
				StrikePrice struct {
				} `json:"strikePrice"`
				OpenInterest struct {
				} `json:"openInterest"`
				Exchange              string `json:"exchange"`
				ExchangeName          string `json:"exchangeName"`
				ExchangeDataDelayedBy int    `json:"exchangeDataDelayedBy"`
				MarketState           string `json:"marketState"`
				QuoteType             string `json:"quoteType"`
				Symbol                string `json:"symbol"`
				UnderlyingSymbol      any    `json:"underlyingSymbol"`
				ShortName             string `json:"shortName"`
				LongName              string `json:"longName"`
				Currency              string `json:"currency"`
				QuoteSourceName       string `json:"quoteSourceName"`
				CurrencySymbol        string `json:"currencySymbol"`
				FromCurrency          any    `json:"fromCurrency"`
				ToCurrency            any    `json:"toCurrency"`
				LastMarket            any    `json:"lastMarket"`
				Volume24Hr            struct {
				} `json:"volume24Hr"`
				VolumeAllCurrencies struct {
				} `json:"volumeAllCurrencies"`
				CirculatingSupply struct {
				} `json:"circulatingSupply"`
				MarketCap struct {
					Raw     int    `json:"raw"`
					Fmt     string `json:"fmt"`
					LongFmt string `json:"longFmt"`
				} `json:"marketCap"`
			} `json:"price"`
		} `json:"result"`
		Error any `json:"error"`
	} `json:"quoteSummary"`
}

func QuoteSummary(ticker string) (*AutoGenerated, error) {

	base, err := url.Parse("https://query1.finance.yahoo.com/v10/finance/quoteSummary/")
	if err != nil {
		return nil, err
	}

	// Path params
	base.Path += ticker

	// Query params
	params := url.Values{}
	params.Add("modules", "price")
	base.RawQuery = params.Encode()

	fmt.Printf("Encoded URL is %q\n", base.String())

	response, err := http.Get(base.String())
	if err != nil {
		fmt.Print(err.Error())
		return nil, err
	}

	responseData, err := io.ReadAll(response.Body)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println(string(responseData))

	var responseObject AutoGenerated
	err = json.Unmarshal(responseData, &responseObject)
	if err != nil {
		return nil, err
	} else {
		return &responseObject, nil
	}
}
